// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: service.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpaClient is the client API for Rpa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpaClient interface {
	Run(ctx context.Context, in *RunArgs, opts ...grpc.CallOption) (Rpa_RunClient, error)
	Control(ctx context.Context, in *ControlArgs, opts ...grpc.CallOption) (*ControlResponse, error)
}

type rpaClient struct {
	cc grpc.ClientConnInterface
}

func NewRpaClient(cc grpc.ClientConnInterface) RpaClient {
	return &rpaClient{cc}
}

func (c *rpaClient) Run(ctx context.Context, in *RunArgs, opts ...grpc.CallOption) (Rpa_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rpa_ServiceDesc.Streams[0], "/rpa.rpa/run", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpaRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rpa_RunClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type rpaRunClient struct {
	grpc.ClientStream
}

func (x *rpaRunClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpaClient) Control(ctx context.Context, in *ControlArgs, opts ...grpc.CallOption) (*ControlResponse, error) {
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, "/rpa.rpa/control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpaServer is the server API for Rpa service.
// All implementations must embed UnimplementedRpaServer
// for forward compatibility
type RpaServer interface {
	Run(*RunArgs, Rpa_RunServer) error
	Control(context.Context, *ControlArgs) (*ControlResponse, error)
	mustEmbedUnimplementedRpaServer()
}

// UnimplementedRpaServer must be embedded to have forward compatible implementations.
type UnimplementedRpaServer struct {
}

func (UnimplementedRpaServer) Run(*RunArgs, Rpa_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRpaServer) Control(context.Context, *ControlArgs) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedRpaServer) mustEmbedUnimplementedRpaServer() {}

// UnsafeRpaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpaServer will
// result in compilation errors.
type UnsafeRpaServer interface {
	mustEmbedUnimplementedRpaServer()
}

func RegisterRpaServer(s grpc.ServiceRegistrar, srv RpaServer) {
	s.RegisterService(&Rpa_ServiceDesc, srv)
}

func _Rpa_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpaServer).Run(m, &rpaRunServer{stream})
}

type Rpa_RunServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type rpaRunServer struct {
	grpc.ServerStream
}

func (x *rpaRunServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _Rpa_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpaServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpa.rpa/control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpaServer).Control(ctx, req.(*ControlArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpa_ServiceDesc is the grpc.ServiceDesc for Rpa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpa.rpa",
	HandlerType: (*RpaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "control",
			Handler:    _Rpa_Control_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "run",
			Handler:       _Rpa_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
